//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
#pragma once
#include "load_texture.h"
#include "input_handler.h"
#include "input\input_manager.h"

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//Forward Declarations
namespace gef
{
	class Platform;
	class SpriteRenderer;
	class Texture;
	class Sprite;
	class Scene;
	class Mesh;
	class Font;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//Possible states in the application
enum GameStates
{
	SPLASH = 0,
	GAME,
	END,
	ERROR,
	MENU
};
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//Possible error states
enum ErrorCodes
{
	NO_ERROR = 0,
	NO_WORLD,
	NO_CAR,
	CAR_OUT_OF_BOUNDS,
	NO_OBSTACLES
};
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
class StateBase
{
public:

	inline StateBase() {};
	inline ~StateBase() {};

	//Virtual functions to be overwritten by children
	virtual void Init(gef::Platform& platform) {};
	virtual bool Update(gef::InputManager* input_manager, float dt, GameStates& game_state, ErrorCodes& error_code) = 0;
	virtual void Render(gef::SpriteRenderer* sprite_renderer, gef::Renderer3D* renderer_3d_) {};
	virtual void CleanUp() {};

	//Detect user input
	InputHandler input_handler;
private:
	virtual void Input(gef::InputManager* input_manager, GameStates& game_state) {};
};
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
