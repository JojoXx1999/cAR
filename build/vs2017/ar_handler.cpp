//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
#include "ar_handler.h"

#include <sony_sample_framework.h>
#include <sony_tracking.h>

#include <system/platform.h>
#include <graphics/sprite_renderer.h>
#include <graphics/texture.h>
#include <graphics/mesh.h>
#include <graphics/primitive.h>
#include <assets/png_loader.h>
#include <graphics/image_data.h>
#include <graphics/font.h>
#include <input/touch_input_manager.h>
#include <maths/vector2.h>
#include <input/input_manager.h>
#include <maths/math_utils.h>
#include <graphics/renderer_3d.h>
#include <graphics/render_target.h>

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void ARHandler::Init()
{
	// initialise sony framework
	sampleInitialize();
	smartInitialize();

	// reset marker tracking
	AppData* dat = sampleUpdateBegin();
	smartTrackingReset();
	sampleUpdateEnd(dat);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void ARHandler::CleanUp()
{
	//Clean up sony framework
	smartRelease();
	sampleRelease();
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void ARHandler::Update()
{
	//Start AR update
	AppData* dat = sampleUpdateBegin();
	smartUpdate(dat->currentImage);

	dat_copy = dat;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void ARHandler::UpdateEnd()
{
	//End the AR update
	sampleUpdateEnd(dat_copy);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
bool ARHandler::isMarkerFound(int markerID)
{
	//Detect if marker can be seen
	if (sampleIsMarkerFound(markerID))
		return true;
	else return false;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void ARHandler::placeMarkerTransform(GameObject& obj, int markerID)
{
	//Place an object at a marker without an offset
	if (sampleIsMarkerFound(markerID))
	{
		gef::Matrix44 marker_transform;
		sampleGetTransform(markerID, &marker_transform);
		obj.Offset(&marker_transform);
	}
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void ARHandler::placeMarkerTransform(GameObject& obj, gef::Matrix44& matrix, float offsetX, float offsetY)
{
	//Place an object at a marker with an offset
	gef::Vector4 position = matrix.GetTranslation();
	position.set_x(position.x() + offsetX);
	position.set_y(position.y() + offsetY);
	position.set_z(position.z());

	matrix.SetTranslation(position);
	obj.set_transform(matrix);
	obj.setPosition(position);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
gef::Matrix44& ARHandler::getMarkerTransform(int markerID)
{
	//Get the transform of a specific marker
	gef::Matrix44 marker_transform;
	sampleGetTransform(markerID, &marker_transform);
	return marker_transform;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void ARHandler::RenderCamera(gef::Platform& platform, gef::Renderer3D& renderer_3d, gef::SpriteRenderer* sprite_renderer)
{
	//Render camera feed onto the screen s a 2D sprite
	renderer_ptr = &renderer_3d;
	float y_scaling_factor = VerticalImageScaleFactor(CAMERA_WIDTH, CAMERA_HEIGHT, DISPLAY_WIDTH, DISPLAY_HEIGHT);

	AppData* dat = sampleRenderBegin();

	// REMEMBER AND SET THE PROJECTION MATRIX HERE
	gef::Matrix44 proj_matrix_cam;
	proj_matrix_cam = platform.OrthographicFrustum(-1, 1, -1, 1, -1, 1);
	sprite_renderer->set_projection_matrix(proj_matrix_cam);


	sprite_renderer->Begin(true);
	gef::Sprite cam_sprite;

	cam_sprite.set_position(gef::Vector4(0, 0, 1));
	cam_sprite.set_width(2);
	cam_sprite.set_height(2 * y_scaling_factor);

	if (dat->currentImage)
	{
		camera_image_texture.set_texture(dat->currentImage->tex_yuv);
		cam_sprite.set_texture(&camera_image_texture);
		sprite_renderer->DrawSprite(cam_sprite);
	}

	sprite_renderer->End();

	// SET VIEW AND PROJECTION MATRIX HERE
	gef::Matrix44 perspective_proj, scale_proj, final_proj, identity;
	perspective_proj = platform.PerspectiveProjectionFov(SCE_SMART_IMAGE_FOV, (float)SCE_SMART_IMAGE_WIDTH / (float)SCE_SMART_IMAGE_HEIGHT, 0.1, 10);

	identity.SetIdentity();

	scale_proj.SetIdentity();
	scale_proj.set_m(1, 1, y_scaling_factor);

	final_proj = perspective_proj * scale_proj;

	renderer_3d.set_projection_matrix(final_proj);
	renderer_3d.set_view_matrix(identity);

	// Begin rendering 3D meshes, don't clear the frame buffer
	renderer_3d.Begin(false);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void ARHandler::EndRender()
{
	//End the AR rendering
	renderer_ptr->End();

	sampleRenderEnd();	
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
float ARHandler::VerticalImageScaleFactor(float width, float height, float display_width, float display_height)
{
	//Scale camera feed to screen
	float img_aspect = width / height;
	float display_aspect = display_width / display_height;

	return(display_aspect / img_aspect);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//