//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
#include "game_object.h"
#include "maths\quaternion.h"
#include <maths\math_utils.h>
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void GameObject::Init()
{
	m_position = gef::Vector4(0.0f, 0.0f, 0.0f);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
bool GameObject::Update(float frame_time)
{
	BuildTransformation();

	return true;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void GameObject::BuildTransformation()
{
	gef::Matrix44 scale;
	scale.Scale(m_scale);

	gef::Matrix44 transform;
	transform.SetIdentity();

	transform.SetTranslation(m_position);
	set_transform(scale * transform);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void GameObject::Offset(gef::Matrix44* marker_transform)
{
	gef::Vector4 marker_position = marker_transform->GetTranslation();
	gef::Vector4 z_axis = gef::Vector4(marker_transform->m(2, 0), marker_transform->m(2, 1), marker_transform->m(2, 2));
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
void GameObject::SetScale(gef::Vector4 s)
{
	//Set the scale of game object
	gef::Matrix44 scale;
	scale.SetIdentity();
	scale.Scale(s);
	set_transform(scale * transform_);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

//-----------------------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------//

gef::Matrix44 GameObject::setTransform(gef::Vector4 S, gef::Quaternion R, gef::Vector4 T)
{
	//set transform matrix with rotation
	gef::Matrix44 Scale, Rotation, Translation;
	Scale.SetIdentity(); Rotation.SetIdentity(); Translation.SetIdentity();

	Scale.Scale(S);
	Rotation.RotationX(gef::DegToRad(R.x)); Rotation.RotationY(gef::DegToRad(R.y)); Rotation.RotationZ(gef::DegToRad(R.z));
	Translation.SetTranslation(T);
	m_transform = Scale * Rotation * Translation;
	return m_transform;

}

gef::Matrix44 GameObject::setTransform(gef::Vector4 S, gef::Vector4 T)
{
	//set transform matrix without rotation
	gef::Matrix44 Scale, Translation, fin;
	Scale.SetIdentity(); Translation.SetIdentity(); fin.SetIdentity();

	Scale.Scale(S);
	Translation.SetTranslation(T);
	fin = Scale * Translation;
	return fin;

}